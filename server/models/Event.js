const mongoose = require('mongoose');

// Event / Alert record for Events & Alerts page
const eventSchema = new mongoose.Schema({
	type: { type: String, required: true },               // e.g. Tamper, Threshold, System
	severity: { type: String, enum: ['Info','Warning','Critical'], default: 'Info' },
	detail: { type: String, required: true },             // human readable summary
	source: { type: String },                             // meter/device id
	status: { type: String, enum: ['New','Ack'], default: 'New' },
	raw: { type: mongoose.Schema.Types.Mixed },           // structured data
	occurredAt: { type: Date, default: Date.now },        // time event occurred
	acknowledgedAt: { type: Date },
	acknowledgedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'Admin' },
	consumerId: { type: mongoose.Schema.Types.ObjectId, ref: 'Consumer' },
	tags: [{ type: String }],
	autoGenerated: { type: Boolean, default: false }
},{ timestamps:true });

// Indexes for filtering & sorting
eventSchema.index({ occurredAt: -1 });
eventSchema.index({ severity: 1 });
eventSchema.index({ type: 1 });
eventSchema.index({ status: 1 });
eventSchema.index({ source: 1 });
eventSchema.index({ consumerId: 1, occurredAt: -1 });

// Auto escalate certain patterns to Critical regardless of provided severity.
eventSchema.pre('save', function(next){
	try {
		const blob = `${this.type||''} ${this.detail||''} ${this.raw? JSON.stringify(this.raw):''}`.toLowerCase();
		const doorPattern = /(door|cover|enclosure|lid)\s*open/;
		const metalPattern = /(metal\s*detect|metal\s*detected|magnet|magnetic\s*field)/;
		// System events forced to Info
		if(this.type && this.type.toLowerCase()==='system') {
			this.severity = 'Info';
		}
		// Door open / metal detected => Critical overrides everything
		if(doorPattern.test(blob) || metalPattern.test(blob)){
			this.severity = 'Critical';
			return next();
		}
		// Voltage threshold mapping (under/over voltage) => Warning unless already Critical for other reasons
		const voltageWarnPattern = /(voltage\s+under|voltage\s+over|under\s*voltage|over\s*voltage|uv\)|ov\))/;
		if(this.severity !== 'Critical' && voltageWarnPattern.test(blob)){
			this.severity = 'Warning';
		}
		next();
	} catch(err){
		next(err);
	}
});

module.exports = mongoose.model('Event', eventSchema);
