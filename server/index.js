const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const mongoose = require('mongoose');

// Load environment variables
dotenv.config();

// Import routes
const authRoutes = require('./routes/auth');
const consumerRoutes = require('./routes/consumer');
const adminRoutes = require('./routes/admin');
const meterRoutes = require('./routes/meter');
const billingRoutes = require('./routes/billing');
const alertRoutes = require('./routes/alerts');
const eventRoutes = require('./routes/events');
const Admin = require('./models/Admin');
const Event = require('./models/Event');

const app = express();
const PORT = process.env.PORT || 5000;

// Security middleware
app.use(helmet());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use(limiter);

// CORS configuration
app.use(cors({
  origin: process.env.CLIENT_URL || 'http://localhost:5173',
  credentials: true
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/powerpulsepro')
.then(async () => {
  console.log('🚀 MongoDB connected successfully');
  // Seed a default super admin if none exists (development convenience)
  try {
    // Seed admin
    const adminCount = await Admin.countDocuments();
    if(adminCount === 0){
      const defaultAdmin = new Admin({
        adminId: 'ADM0001',
        name: 'Super Admin',
        email: process.env.DEFAULT_ADMIN_EMAIL || 'admin@powerpulsepro.local',
        password: process.env.DEFAULT_ADMIN_PASSWORD || 'Admin@12345',
        role: 'super-admin',
        permissions: [
          'read-consumers','write-consumers','delete-consumers',
          'read-meters','write-meters',
          'read-billing','write-billing',
          'read-alerts','write-alerts',
          'system-settings','user-management','reports-access'
        ],
        department: 'it',
        status: 'active'
      });
      await defaultAdmin.save();
      console.log('🛡️  Seeded default super admin (dev only)');
    }

    // Optional seed events (only if none exist) unless disabled
    if(process.env.SEED_EVENTS !== 'false'){
      const eventCount = await Event.countDocuments();
      if(eventCount === 0){
        await Event.insertMany([
          { type:'System', severity:'Info', detail:'System initialized successfully.', source:'PPPRO-001', status:'New', autoGenerated:true },
          { type:'Threshold', severity:'Warning', detail:'Voltage under limit (UV): 175V (< 180V).', source:'PPPRO-001', status:'New', autoGenerated:true, occurredAt: new Date(Date.now()-5*60*1000) },
          { type:'Tamper', severity:'Critical', detail:'Cover opened detection triggered.', source:'PPPRO-002', status:'New', autoGenerated:true, occurredAt: new Date(Date.now()-10*60*1000) }
        ]);
        console.log('⚡ Seeded sample events (dev only)');
      }
    }
  } catch(seedErr){
    console.error('Seeding error:', seedErr.message);
  }
})
.catch((err) => console.error('❌ MongoDB connection error:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/consumer', consumerRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/meter', meterRoutes);
app.use('/api/billing', billingRoutes);
app.use('/api/alerts', alertRoutes);
app.use('/api/events', eventRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({
    status: 'success',
    message: 'PowerPulsePro API is running!',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err.stack);
  res.status(500).json({
    status: 'error',
    message: process.env.NODE_ENV === 'production' 
      ? 'Something went wrong!' 
      : err.message
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    status: 'error',
    message: 'Route not found'
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`🌟 PowerPulsePro Server running on port ${PORT}`);
  console.log(`🔗 API URL: http://localhost:${PORT}`);
  console.log(`📊 Health Check: http://localhost:${PORT}/api/health`);
});

module.exports = app;